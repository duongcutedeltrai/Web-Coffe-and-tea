generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model cart {
  cart_id      Int            @id @default(autoincrement())
  user_id      Int
  total        Int
  quantity     Int
  users        users          @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction, map: "cart_ibfk_1")
  cart_details cart_details[]

  @@index([user_id], map: "user_id")
}

model cart_details {
  cart_detail_id Int      @id @default(autoincrement())
  cart_id        Int
  product_id     Int
  quantity       Int
  price          Int
  cart           cart     @relation(fields: [cart_id], references: [cart_id], onDelete: NoAction, onUpdate: NoAction, map: "cart_details_ibfk_1")
  products       products @relation(fields: [product_id], references: [product_id], onDelete: NoAction, onUpdate: NoAction, map: "cart_details_ibfk_2")

  @@index([cart_id], map: "cart_id")
  @@index([product_id], map: "product_id")
}

model categories {
  category_id Int        @id @default(autoincrement())
  name        String     @db.VarChar(100)
  description String?    @db.VarChar(255)
  created_at  DateTime?  @default(now()) @db.DateTime(0)
  deleted_at  DateTime?
  products    products[]
}

model feedback {
  id         Int      @id @default(autoincrement())
  user_id    Int
  product_id Int
  created_at DateTime @default(now()) @db.DateTime(0)
  rating     Int
  comment    String?  @db.VarChar(255)
  users      users    @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction, map: "feedback_ibfk_1")
  products   products @relation(fields: [product_id], references: [product_id], onDelete: NoAction, onUpdate: NoAction, map: "feedback_ibfk_2")

  @@index([product_id], map: "product_id")
  @@index([user_id], map: "user_id")
}

model inventory {
  inventory_id Int                   @id @default(autoincrement())
  product_id   Int
  change_type  inventory_change_type
  quantity     Int
  created_at   DateTime              @default(now()) @db.DateTime(0)
  products     products              @relation(fields: [product_id], references: [product_id], onDelete: NoAction, onUpdate: NoAction, map: "inventory_ibfk_1")

  @@index([product_id], map: "product_id")
}

model order_details {
  order_detail_id Int      @id @default(autoincrement())
  order_id        Int
  product_id      Int
  quantity        Int
  price           Decimal  @db.Decimal(10, 2)
  orders          orders   @relation(fields: [order_id], references: [order_id], onDelete: NoAction, onUpdate: NoAction, map: "order_details_ibfk_1")
  products        products @relation(fields: [product_id], references: [product_id], onDelete: NoAction, onUpdate: NoAction, map: "order_details_ibfk_2")

  @@index([order_id], map: "order_id")
  @@index([product_id], map: "product_id")
}

model order_status_history {
  order_status_history_id Int                         @id @default(autoincrement())
  order_id                Int
  status                  order_status_history_status
  changed_at              DateTime                    @default(now()) @db.DateTime(0)
  orders                  orders                      @relation(fields: [order_id], references: [order_id], onDelete: NoAction, onUpdate: NoAction, map: "order_status_history_ibfk_1")

  @@index([order_id], map: "order_id")
}

model orders {
  order_id             Int                    @id @default(autoincrement())
  user_id              Int
  orderDate            DateTime               @default(now()) @db.DateTime(0)
  status               orders_status          @default(pending)
  total_amount         Int
  delivery_address     String                 @db.VarChar(255)
  receiver_name        String                 @db.VarChar(100)
  receiver_phone       String                 @db.VarChar(20)
  order_details        order_details[]
  order_status_history order_status_history[]
  users                users                  @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction, map: "orders_ibfk_1")
  payment              payment[]

  @@index([user_id], map: "user_id")
}

model payment {
  payment_id       Int            @id @default(autoincrement())
  order_id         Int
  method           payment_method
  status           payment_status @default(pending)
  total_amount     Int
  transaction_date DateTime       @default(now()) @db.DateTime(0)
  orders           orders         @relation(fields: [order_id], references: [order_id], onDelete: NoAction, onUpdate: NoAction, map: "payment_ibfk_1")

  @@index([order_id], map: "order_id")
}

model products {
  product_id         Int                  @id @default(autoincrement())
  name               String               @db.VarChar(255)
  description        String?              @db.VarChar(255)
  sold               Int                  @default(0)
  category_id        Int?
  images             String?              @db.VarChar(255)
  quantity           Int                  @default(0)
  cart_details       cart_details[]
  feedback           feedback[]
  inventory          inventory[]
  order_details      order_details[]
  price_product      price_product[]
  categories         categories?          @relation(fields: [category_id], references: [category_id], onDelete: NoAction, onUpdate: NoAction, map: "products_ibfk_1")
  promotion_products promotion_products[]

  @@index([category_id], map: "category_id")
}

model promotion_products {
  promotion_product_id Int        @id @default(autoincrement())
  promotion_id         Int
  product_id           Int
  promotions           promotions @relation(fields: [promotion_id], references: [promotion_id], onDelete: NoAction, onUpdate: NoAction, map: "promotion_products_ibfk_1")
  products             products   @relation(fields: [product_id], references: [product_id], onDelete: NoAction, onUpdate: NoAction, map: "promotion_products_ibfk_2")

  @@index([product_id], map: "product_id")
  @@index([promotion_id], map: "promotion_id")
}

model promotions {
  promotion_id       Int                  @id @default(autoincrement())
  code               String               @unique(map: "code") @db.VarChar(50)
  description        String?              @db.VarChar(255)
  discount_percent   Int
  start_date         DateTime             @db.Date
  end_date           DateTime             @db.Date
  promotion_products promotion_products[]
}

model roles {
  role_id     Int     @id @default(autoincrement())
  name        String  @db.VarChar(50)
  description String  @db.VarChar(255)
  users       users[]
}

model users {
  user_id       Int                  @id @default(autoincrement())
  email         String               @unique(map: "email") @db.VarChar(255)
  username      String               @db.VarChar(255)
  password      String               @db.VarChar(255)
  phone         String               @db.VarChar(255)
  address       String?              @db.VarChar(255)
  avatar        String?              @db.VarChar(255)
  gender        String?              @db.VarChar(45)
  birthday      DateTime?
  status        user_status          @default(ACTIVE)
  point         Int?                 @default(0)
  role_id       Int
  auth_provider users_auth_provider? @default(system)
  cart          cart[]
  feedback      feedback[]
  orders        orders[]
  roles         roles                @relation(fields: [role_id], references: [role_id], onDelete: NoAction, onUpdate: NoAction, map: "users_ibfk_1")

  @@index([role_id], map: "role_id")
}

model price_product {
  price_product_id Int                 @id @default(autoincrement())
  product_id       Int
  size             price_product_size?
  price            Int
  products         products            @relation(fields: [product_id], references: [product_id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([product_id, size], map: "product_size_unique")
  @@index([product_id], map: "product_id_idx")
}

enum inventory_change_type {
  import
  export
  adjustment
}

enum payment_method {
  cod
  banking
  momo
  paypal
}

enum order_status_history_status {
  pending
  paid
  shipped
  completed
  canceled
}

enum payment_status {
  pending
  success
  failed
}

enum orders_status {
  pending
  paid
  shipped
  completed
  canceled
}

enum users_auth_provider {
  system
  google
  facebook
  apple
}

enum price_product_size {
  M
  L
  XL
  DEFAULT
}

enum user_status {
  ACTIVE
  LOCKED
}
